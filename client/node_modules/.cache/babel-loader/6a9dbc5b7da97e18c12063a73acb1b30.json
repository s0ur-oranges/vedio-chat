{"ast":null,"code":"import io from \"socket.io-client\";\nimport { setRoomId, setParticipants, setSocketId } from \"../store/actions\";\nimport store from \"../store/store\";\nimport * as webRTCHandler from \"./webRTCHandler\";\nimport { appendNewMessageToChatHistory } from \"./directMessages\";\nconst SERVER = \"http://localhost:5002\";\nlet socket = null;\nexport const connectWithSocketIOServer = () => {\n  socket = io(SERVER);\n  socket.on(\"connect\", () => {\n    console.log(\"successfully connected with socket io server\");\n    console.log(socket.id);\n    store.dispatch(setSocketId(socket.id));\n  });\n  socket.on(\"room-id\", data => {\n    const {\n      roomId\n    } = data;\n    store.dispatch(setRoomId(roomId));\n  });\n  socket.on(\"room-update\", data => {\n    const {\n      connectedUsers\n    } = data;\n    store.dispatch(setParticipants(connectedUsers));\n  });\n  socket.on(\"conn-prepare\", data => {\n    const {\n      connUserSocketId\n    } = data;\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, false); // inform the user which just join the room that we have prepared for incoming connection\n\n    socket.emit(\"conn-init\", {\n      connUserSocketId: connUserSocketId\n    });\n  });\n  socket.on(\"conn-signal\", data => {\n    webRTCHandler.handleSignalingData(data);\n  });\n  socket.on(\"conn-init\", data => {\n    const {\n      connUserSocketId\n    } = data;\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, true);\n  });\n  socket.on(\"user-disconnected\", data => {\n    webRTCHandler.removePeerConnection(data);\n  });\n  socket.on(\"direct-message\", data => {\n    appendNewMessageToChatHistory(data);\n  });\n};\nexport const createNewRoom = (identity, onlyAudio) => {\n  // emit an event to server that we would like to create new room\n  const data = {\n    identity,\n    onlyAudio\n  };\n  socket.emit(\"create-new-room\", data);\n};\nexport const joinRoom = (identity, roomId, onlyAudio) => {\n  //emit an event to server that we would to join a room\n  const data = {\n    roomId,\n    identity,\n    onlyAudio\n  };\n  socket.emit(\"join-room\", data);\n};\nexport const signalPeerData = data => {\n  socket.emit(\"conn-signal\", data);\n};\nexport const sendDirectMessage = data => {\n  socket.emit(\"direct-message\", data);\n};","map":{"version":3,"names":["io","setRoomId","setParticipants","setSocketId","store","webRTCHandler","appendNewMessageToChatHistory","SERVER","socket","connectWithSocketIOServer","on","console","log","id","dispatch","data","roomId","connectedUsers","connUserSocketId","prepareNewPeerConnection","emit","handleSignalingData","removePeerConnection","createNewRoom","identity","onlyAudio","joinRoom","signalPeerData","sendDirectMessage"],"sources":["C:/Users/Jahanvi Chaudhary/Desktop/webRTC-advanced/client/src/utils/wss.js"],"sourcesContent":["import io from \"socket.io-client\";\r\nimport { setRoomId, setParticipants, setSocketId } from \"../store/actions\";\r\nimport store from \"../store/store\";\r\nimport * as webRTCHandler from \"./webRTCHandler\";\r\nimport { appendNewMessageToChatHistory } from \"./directMessages\";\r\n\r\nconst SERVER = \"http://localhost:5002\";\r\n\r\nlet socket = null;\r\n\r\nexport const connectWithSocketIOServer = () => {\r\n  socket = io(SERVER);\r\n\r\n  socket.on(\"connect\", () => {\r\n    console.log(\"successfully connected with socket io server\");\r\n    console.log(socket.id);\r\n    store.dispatch(setSocketId(socket.id));\r\n  });\r\n\r\n  socket.on(\"room-id\", (data) => {\r\n    const { roomId } = data;\r\n    store.dispatch(setRoomId(roomId));\r\n  });\r\n\r\n  socket.on(\"room-update\", (data) => {\r\n    const { connectedUsers } = data;\r\n    store.dispatch(setParticipants(connectedUsers));\r\n  });\r\n\r\n  socket.on(\"conn-prepare\", (data) => {\r\n    const { connUserSocketId } = data;\r\n\r\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, false);\r\n\r\n    // inform the user which just join the room that we have prepared for incoming connection\r\n    socket.emit(\"conn-init\", { connUserSocketId: connUserSocketId });\r\n  });\r\n\r\n  socket.on(\"conn-signal\", (data) => {\r\n    webRTCHandler.handleSignalingData(data);\r\n  });\r\n\r\n  socket.on(\"conn-init\", (data) => {\r\n    const { connUserSocketId } = data;\r\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, true);\r\n  });\r\n\r\n  socket.on(\"user-disconnected\", (data) => {\r\n    webRTCHandler.removePeerConnection(data);\r\n  });\r\n\r\n  socket.on(\"direct-message\", (data) => {\r\n    appendNewMessageToChatHistory(data);\r\n  });\r\n};\r\n\r\nexport const createNewRoom = (identity, onlyAudio) => {\r\n  // emit an event to server that we would like to create new room\r\n  const data = {\r\n    identity,\r\n    onlyAudio,\r\n  };\r\n\r\n  socket.emit(\"create-new-room\", data);\r\n};\r\n\r\nexport const joinRoom = (identity, roomId, onlyAudio) => {\r\n  //emit an event to server that we would to join a room\r\n  const data = {\r\n    roomId,\r\n    identity,\r\n    onlyAudio,\r\n  };\r\n\r\n  socket.emit(\"join-room\", data);\r\n};\r\n\r\nexport const signalPeerData = (data) => {\r\n  socket.emit(\"conn-signal\", data);\r\n};\r\n\r\nexport const sendDirectMessage = (data) => {\r\n  socket.emit(\"direct-message\", data);\r\n};\r\n"],"mappings":"AAAA,OAAOA,EAAP,MAAe,kBAAf;AACA,SAASC,SAAT,EAAoBC,eAApB,EAAqCC,WAArC,QAAwD,kBAAxD;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAASC,6BAAT,QAA8C,kBAA9C;AAEA,MAAMC,MAAM,GAAG,uBAAf;AAEA,IAAIC,MAAM,GAAG,IAAb;AAEA,OAAO,MAAMC,yBAAyB,GAAG,MAAM;EAC7CD,MAAM,GAAGR,EAAE,CAACO,MAAD,CAAX;EAEAC,MAAM,CAACE,EAAP,CAAU,SAAV,EAAqB,MAAM;IACzBC,OAAO,CAACC,GAAR,CAAY,8CAAZ;IACAD,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACK,EAAnB;IACAT,KAAK,CAACU,QAAN,CAAeX,WAAW,CAACK,MAAM,CAACK,EAAR,CAA1B;EACD,CAJD;EAMAL,MAAM,CAACE,EAAP,CAAU,SAAV,EAAsBK,IAAD,IAAU;IAC7B,MAAM;MAAEC;IAAF,IAAaD,IAAnB;IACAX,KAAK,CAACU,QAAN,CAAeb,SAAS,CAACe,MAAD,CAAxB;EACD,CAHD;EAKAR,MAAM,CAACE,EAAP,CAAU,aAAV,EAA0BK,IAAD,IAAU;IACjC,MAAM;MAAEE;IAAF,IAAqBF,IAA3B;IACAX,KAAK,CAACU,QAAN,CAAeZ,eAAe,CAACe,cAAD,CAA9B;EACD,CAHD;EAKAT,MAAM,CAACE,EAAP,CAAU,cAAV,EAA2BK,IAAD,IAAU;IAClC,MAAM;MAAEG;IAAF,IAAuBH,IAA7B;IAEAV,aAAa,CAACc,wBAAd,CAAuCD,gBAAvC,EAAyD,KAAzD,EAHkC,CAKlC;;IACAV,MAAM,CAACY,IAAP,CAAY,WAAZ,EAAyB;MAAEF,gBAAgB,EAAEA;IAApB,CAAzB;EACD,CAPD;EASAV,MAAM,CAACE,EAAP,CAAU,aAAV,EAA0BK,IAAD,IAAU;IACjCV,aAAa,CAACgB,mBAAd,CAAkCN,IAAlC;EACD,CAFD;EAIAP,MAAM,CAACE,EAAP,CAAU,WAAV,EAAwBK,IAAD,IAAU;IAC/B,MAAM;MAAEG;IAAF,IAAuBH,IAA7B;IACAV,aAAa,CAACc,wBAAd,CAAuCD,gBAAvC,EAAyD,IAAzD;EACD,CAHD;EAKAV,MAAM,CAACE,EAAP,CAAU,mBAAV,EAAgCK,IAAD,IAAU;IACvCV,aAAa,CAACiB,oBAAd,CAAmCP,IAAnC;EACD,CAFD;EAIAP,MAAM,CAACE,EAAP,CAAU,gBAAV,EAA6BK,IAAD,IAAU;IACpCT,6BAA6B,CAACS,IAAD,CAA7B;EACD,CAFD;AAGD,CA5CM;AA8CP,OAAO,MAAMQ,aAAa,GAAG,CAACC,QAAD,EAAWC,SAAX,KAAyB;EACpD;EACA,MAAMV,IAAI,GAAG;IACXS,QADW;IAEXC;EAFW,CAAb;EAKAjB,MAAM,CAACY,IAAP,CAAY,iBAAZ,EAA+BL,IAA/B;AACD,CARM;AAUP,OAAO,MAAMW,QAAQ,GAAG,CAACF,QAAD,EAAWR,MAAX,EAAmBS,SAAnB,KAAiC;EACvD;EACA,MAAMV,IAAI,GAAG;IACXC,MADW;IAEXQ,QAFW;IAGXC;EAHW,CAAb;EAMAjB,MAAM,CAACY,IAAP,CAAY,WAAZ,EAAyBL,IAAzB;AACD,CATM;AAWP,OAAO,MAAMY,cAAc,GAAIZ,IAAD,IAAU;EACtCP,MAAM,CAACY,IAAP,CAAY,aAAZ,EAA2BL,IAA3B;AACD,CAFM;AAIP,OAAO,MAAMa,iBAAiB,GAAIb,IAAD,IAAU;EACzCP,MAAM,CAACY,IAAP,CAAY,gBAAZ,EAA8BL,IAA9B;AACD,CAFM"},"metadata":{},"sourceType":"module"}
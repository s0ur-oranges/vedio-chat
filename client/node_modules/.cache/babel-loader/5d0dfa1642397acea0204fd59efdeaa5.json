{"ast":null,"code":"import io from\"socket.io-client\";import{setRoomId,setParticipants,setSocketId}from\"../store/actions\";import store from\"../store/store\";import*as webRTCHandler from\"./webRTCHandler\";import{appendNewMessageToChatHistory}from\"./directMessages\";var SERVER=\"http://localhost:5002\";var socket=null;export var connectWithSocketIOServer=function connectWithSocketIOServer(){socket=io(SERVER);socket.on(\"connect\",function(){console.log(\"successfully connected with socket io server\");console.log(socket.id);store.dispatch(setSocketId(socket.id));});socket.on(\"room-id\",function(data){var roomId=data.roomId;store.dispatch(setRoomId(roomId));});socket.on(\"room-update\",function(data){var connectedUsers=data.connectedUsers;store.dispatch(setParticipants(connectedUsers));});socket.on(\"conn-prepare\",function(data){var connUserSocketId=data.connUserSocketId;webRTCHandler.prepareNewPeerConnection(connUserSocketId,false);// inform the user which just join the room that we have prepared for incoming connection\nsocket.emit(\"conn-init\",{connUserSocketId:connUserSocketId});});socket.on(\"conn-signal\",function(data){webRTCHandler.handleSignalingData(data);});socket.on(\"conn-init\",function(data){var connUserSocketId=data.connUserSocketId;webRTCHandler.prepareNewPeerConnection(connUserSocketId,true);});socket.on(\"user-disconnected\",function(data){webRTCHandler.removePeerConnection(data);});socket.on(\"direct-message\",function(data){appendNewMessageToChatHistory(data);});};export var createNewRoom=function createNewRoom(identity,onlyAudio){// emit an event to server that we would like to create new room\nvar data={identity:identity,onlyAudio:onlyAudio};socket.emit(\"create-new-room\",data);};export var joinRoom=function joinRoom(identity,roomId,onlyAudio){//emit an event to server that we would to join a room\nvar data={roomId:roomId,identity:identity,onlyAudio:onlyAudio};socket.emit(\"join-room\",data);};export var signalPeerData=function signalPeerData(data){socket.emit(\"conn-signal\",data);};export var sendDirectMessage=function sendDirectMessage(data){socket.emit(\"direct-message\",data);};","map":{"version":3,"names":["io","setRoomId","setParticipants","setSocketId","store","webRTCHandler","appendNewMessageToChatHistory","SERVER","socket","connectWithSocketIOServer","on","console","log","id","dispatch","data","roomId","connectedUsers","connUserSocketId","prepareNewPeerConnection","emit","handleSignalingData","removePeerConnection","createNewRoom","identity","onlyAudio","joinRoom","signalPeerData","sendDirectMessage"],"sources":["C:/Users/Jahanvi Chaudhary/Desktop/webRTC-advanced/client/src/utils/wss.js"],"sourcesContent":["import io from \"socket.io-client\";\r\nimport { setRoomId, setParticipants, setSocketId } from \"../store/actions\";\r\nimport store from \"../store/store\";\r\nimport * as webRTCHandler from \"./webRTCHandler\";\r\nimport { appendNewMessageToChatHistory } from \"./directMessages\";\r\n\r\nconst SERVER = \"http://localhost:5002\";\r\n\r\nlet socket = null;\r\n\r\nexport const connectWithSocketIOServer = () => {\r\n  socket = io(SERVER);\r\n\r\n  socket.on(\"connect\", () => {\r\n    console.log(\"successfully connected with socket io server\");\r\n    console.log(socket.id);\r\n    store.dispatch(setSocketId(socket.id));\r\n  });\r\n\r\n  socket.on(\"room-id\", (data) => {\r\n    const { roomId } = data;\r\n    store.dispatch(setRoomId(roomId));\r\n  });\r\n\r\n  socket.on(\"room-update\", (data) => {\r\n    const { connectedUsers } = data;\r\n    store.dispatch(setParticipants(connectedUsers));\r\n  });\r\n\r\n  socket.on(\"conn-prepare\", (data) => {\r\n    const { connUserSocketId } = data;\r\n\r\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, false);\r\n\r\n    // inform the user which just join the room that we have prepared for incoming connection\r\n    socket.emit(\"conn-init\", { connUserSocketId: connUserSocketId });\r\n  });\r\n\r\n  socket.on(\"conn-signal\", (data) => {\r\n    webRTCHandler.handleSignalingData(data);\r\n  });\r\n\r\n  socket.on(\"conn-init\", (data) => {\r\n    const { connUserSocketId } = data;\r\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, true);\r\n  });\r\n\r\n  socket.on(\"user-disconnected\", (data) => {\r\n    webRTCHandler.removePeerConnection(data);\r\n  });\r\n\r\n  socket.on(\"direct-message\", (data) => {\r\n    appendNewMessageToChatHistory(data);\r\n  });\r\n};\r\n\r\nexport const createNewRoom = (identity, onlyAudio) => {\r\n  // emit an event to server that we would like to create new room\r\n  const data = {\r\n    identity,\r\n    onlyAudio,\r\n  };\r\n\r\n  socket.emit(\"create-new-room\", data);\r\n};\r\n\r\nexport const joinRoom = (identity, roomId, onlyAudio) => {\r\n  //emit an event to server that we would to join a room\r\n  const data = {\r\n    roomId,\r\n    identity,\r\n    onlyAudio,\r\n  };\r\n\r\n  socket.emit(\"join-room\", data);\r\n};\r\n\r\nexport const signalPeerData = (data) => {\r\n  socket.emit(\"conn-signal\", data);\r\n};\r\n\r\nexport const sendDirectMessage = (data) => {\r\n  socket.emit(\"direct-message\", data);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}